<!DOCTYPE html>
<html>
  <body>
    <div>
      <h3>Sign Typed Data V4</h3>
      <button type="button" id="signTypedDataV4Button">
        sign typed data v4
      </button>
    </div>
  </body>
  <script
    src="https://cdn.ethers.io/lib/ethers-5.2.esm.min.js"
    type="application/javascript"
  ></script>
  <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
  <script src="https://unpkg.com/@metamask/detect-provider/dist/detect-provider.min.js"></script>
  <script type="text/javascript">
    if (typeof window.ethereum === "undefined") {
      alert("MetaMask is uninstalled!");
    }

    const ethereum = window.ethereum;
    const showAccount = document.querySelector(".showAccount");
    signTypedDataV4Button
      .addEventListener("click", async function (event) {
        event.preventDefault();
        console.log("signTypedDataV4Button");
        const from = await ethereum.request({ method: "eth_requestAccounts" });
        const fromAddress = from[0];
        const toAddress = "0x1EE22eBed9A23440d3EcEcA258aB8Dd963Af571f";
        console.log("fromAddress", fromAddress, "toAddress", toAddress);

        const msgParams = JSON.stringify({
          domain: {
            // Give a user friendly name to the specific contract you are signing for.
            name: "MyEIP712", // 메타마스크에 표시되는 컨트렉트 이름, 예를들어 0000거래소
            // Just let's you know the latest version. Definitely make sure the field name is correct.
            version: "1", // 눈에 보이는 명시하는 버전
            // Defining the chain aka Rinkeby testnet or Ethereum Main Net
            chainId: "80001",
            // If name isn't enough add verifying contract to make sure you are establishing contracts with the proper entity
            verifyingContract: "0x7DB67d7ec3a0D539ed13c6681eB60F523c7C3427", // 사인을 하는 컨트렉트의 주소, 0000거래소의 CA
          },

          // Defining the message signing data content.
          message: {
            /*
            - Anything you want. Just a JSON Blob that encodes the data you want to send
            - No required fields
            - This is DApp Specific
            - Be as explicit as possible when building out the message schema.
            */
            from: fromAddress,
            to: toAddress,
            data: "some data here",
          },
          // Refers to the keys of the *types* object below.
          primaryType: "Message",
          types: {
            EIP712Domain: [
              { name: "name", type: "string" },
              { name: "version", type: "string" },
              { name: "chainId", type: "uint256" },
              { name: "verifyingContract", type: "address" },
            ],
            Message: [
              { name: "from", type: "address" },
              { name: "to", type: "address" },
              { name: "data", type: "string" },
            ],
          },
        });

        console.log("msgParams", msgParams);

        const accounts = await ethereum.request({ method: "eth_accounts" });
        console.log("accounts", accounts);

        var params = [accounts[0], msgParams];
        var method = "eth_signTypedData_v4";

        web3.currentProvider.sendAsync(
          {
            method,
            params,
            from: accounts[0],
          },
          function (err, result) {
            if (err) return console.dir(err);
            if (result.error) {
              alert(result.error.message);
            }
            if (result.error) return console.error("ERROR", result);
            console.log("TYPED SIGNED:" + JSON.stringify(result.result));
          }
        );
      })
      .catch((error) => {
        console.log(error);
        // If the request fails, the Promise will reject with an error.
      });
  </script>
</html>
